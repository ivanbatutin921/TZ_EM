package database

import (
	"time"

	"root/shared/logger"

	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	gormLogger "gorm.io/gorm/logger"
	"gorm.io/sharding"
)

const NumShards = 4 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–¥–æ–≤

func ConnectDb(url string, log *logger.Logger) (*gorm.DB, error) {
	log.Debug("üîç Starting database connection process")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	log.Debug("üîÑ Loading environment variables from .env file")
	if err := godotenv.Load("../.env"); err != nil {
		log.Warnf("‚ö†Ô∏è Could not load .env file: %v. Using default environment variables.", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
	log.Debugf("üîó Connecting to database with DSN: %s", url)
	db, err := gorm.Open(postgres.New(postgres.Config{
		DSN:                  url,
		PreferSimpleProtocol: true,
	}), &gorm.Config{
		Logger: gormLogger.Default.LogMode(gormLogger.Warn),
	})
	if err != nil {
		log.Errorf("‚ùå Failed to connect to database: %v", err)
		return nil, err
	}

	log.Info("‚úÖ Database connection established successfully")

	// –í–∫–ª—é—á–∞–µ–º —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
	log.Debug("‚ö° Enabling database sharding")
	err = db.Use(sharding.Register(sharding.Config{
		ShardingKey:         "group_id",
		NumberOfShards:      NumShards,
		PrimaryKeyGenerator: sharding.PKSnowflake, // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
	}, "songs"))
	if err != nil {
		log.Errorf("‚ùå Failed to register sharding: %v", err)
		return nil, err
	}

	log.Info("‚úÖ Sharding configured successfully")

	// –ù–∞—Å—Ç—Ä–æ–∏–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	log.Debug("üì¶ Configuring database connection pool")
	sqlDB, err := db.DB()
	if err != nil {
		log.Errorf("‚ùå Failed to configure database connection pool: %v", err)
		return nil, err
	}

	sqlDB.SetMaxIdleConns(20)
	log.Debug("‚öôÔ∏è Max idle connections set to 20")

	sqlDB.SetMaxOpenConns(200)
	log.Debug("‚öôÔ∏è Max open connections set to 200")

	sqlDB.SetConnMaxLifetime(time.Hour)
	log.Debugf("‚öôÔ∏è Connection max lifetime set to %v", time.Hour)

	log.Info("‚úÖ Database connection pool configured successfully")

	log.Debug("üîç Database connection process completed")

	return db, nil
}
