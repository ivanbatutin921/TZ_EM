// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://songlibrary.com/support",
            "email": "support@songlibrary.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/song": {
            "get": {
                "description": "Возвращает список песен с поддержкой фильтрации и пагинации. Фильтрация доступна по группе, названию песни, дате релиза, тексту песни и ссылке. Пагинация позволяет указать смещение и количество записей на странице.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Песни"
                ],
                "summary": "Получение списка песен",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Смещение для пагинации. Указывает, сколько записей пропустить перед началом выборки. По умолчанию 0.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Количество записей на странице. Определяет, сколько записей вернуть в ответе. По умолчанию 10.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по названию группы. Возвращает песни, где название группы содержит указанную строку.",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по названию песни. Возвращает песни, где название песни содержит указанную строку.",
                        "name": "song",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по дате релиза. Возвращает песни, выпущенные в указанную дату. Формат даты: YYYY-MM-DD.",
                        "name": "release_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по тексту песни. Возвращает песни, где текст песни содержит указанную строку.",
                        "name": "text",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по ссылке. Возвращает песни, где ссылка содержит указанную строку.",
                        "name": "link",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список песен. Каждая песня представлена в виде объекта с полями: id, group_id, group, song, release_date, text, link.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос. Возможные причины:",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера. Возможные причины:",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Добавляет новую песню в систему. Для добавления необходимо указать название группы и название песни.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Песни"
                ],
                "summary": "Добавление новой песни",
                "parameters": [
                    {
                        "description": "Данные для добавления песни. Должен быть объектом JSON, содержащим поля group и song.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешный ответ. Возвращает сообщение об успешном добавлении.",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    }
                }
            }
        },
        "/api/song/{id}": {
            "get": {
                "description": "Возвращает текст песни с поддержкой пагинации. Текст разбит на секции (куплеты, припевы), и можно указать страницу и количество строк на странице.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Песни"
                ],
                "summary": "Получение текста песни",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID песни. Уникальный идентификатор песни в системе.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Страница текста. Указывает, какую страницу текста вернуть. По умолчанию 1.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Количество строк текста на странице. Определяет, сколько строк текста вернуть. По умолчанию 1.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ. Возвращает текст песни, разбитый на секции.",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "404": {
                        "description": "Песня не найдена. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные песни по её уникальному идентификатору (ID). Можно обновить одно или несколько полей песни.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Песни"
                ],
                "summary": "Обновление данных песни",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID песни. Уникальный идентификатор песни в системе.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления. Должен быть объектом JSON, содержащим поля для обновления (например, group, song, release_date, text, link).",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ. Возвращает сообщение об успешном обновлении.",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "404": {
                        "description": "Песня не найдена. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет песню по её уникальному идентификатору (ID). После удаления песня больше не будет доступна в системе.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Песни"
                ],
                "summary": "Удаление песни",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID песни. Уникальный идентификатор песни в системе.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ. Возвращает сообщение об успешном удалении.",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "404": {
                        "description": "Песня не найдена. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера. Возможные причины:",
                        "schema": {
                            "$ref": "#/definitions/song_controller.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "song_controller.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "http://127.0.0.1:3000",
	BasePath:         "/v1",
	Schemes:          []string{"http"},
	Title:            "Song Library API",
	Description:      "API for managing a song library. Provides endpoints for adding, updating, deleting, and retrieving songs, as well as fetching song lyrics with pagination.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
